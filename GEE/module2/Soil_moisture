//1) กำหนดพื้นที่ศึกษา 
//var c = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017').filter(ee.Filter.eq('country_na', 'Thailand'));
var c = ee.FeatureCollection("projects/ee-domwatcharin/assets/LRM")

//2) เรียกชุดข้อมูลSoil Moisture จาก SMAP (max at 25.39mm) พร้อมกับกำหนดช่วงเวลาที่สนใจ
var dataset = ee.ImageCollection('NASA_USDA/HSL/SMAP10KM_soil_moisture')
                  .filter(ee.Filter.date('2021-09-01', '2021-09-30'));
var soilMoisture = dataset.select('ssm').median();

//3) แต่งหน้าแต่งตา 
var soilMoistureVis = {
  min: 0.0,
  max: 28.0,
  palette: ['red', '418504', 'efff07', 'efff07', 'green'],
};

//4) กำหนดกึ่งกลางแผนที่ และระดับการซูม พร้อมแสดงแผนที่ 
Map.centerObject(c, 10);
Map.addLayer(soilMoisture.clip(c), soilMoistureVis, 'Soil Moisture');

/// ประยุกต์ใช้ในการทำนายพื้นที่น้ำท่วม

//var now = Date.now();	
//var start= '2021-08-01';


var dataset = ee.ImageCollection('NASA_USDA/HSL/SMAP10KM_soil_moisture')
//dry season
var before = dataset.filterDate('2019-04-01', '2019-04-30').select('ssm').median();
//wet season
var after = dataset.filterDate('2018-10-01', '2018-10-30').select('ssm').median()

var SMOOTHING_RADIUS = 10; 

//apply focal_median on radar intensititioes
var before_smoothed = before.focal_median(SMOOTHING_RADIUS, 'circle', 'meters')
var after_smoothed = after.focal_median(SMOOTHING_RADIUS, 'circle', 'meters')
var diff = after_smoothed.subtract(before_smoothed)
var mask = diff.gt(0);
var sm = diff.updateMask(mask);

//soilMoisture difference;
var palette = ['FF0000','22ff00','7f7d7d'];

var soilMoistureVis = {min: 0, max: 30, palette: palette};
Map.addLayer(sm.clip(c), soilMoistureVis, 'dSSM');
Map.setOptions('TERRAIN');
Map.setCenter(100.2, 13.9, 6);

// Add legend
// set position of panel
var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px'
  }
});
 
// Create legend title
var legendTitle = ui.Label({
  value: 'Flood-prone Area',
  style: {
    fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0',
    padding: '0'
    }
});
 
// Add the title to the panel
legend.add(legendTitle);
 
// Creates and styles 1 row of the legend.
var makeRow = function(color, name) {
 
      // Create the label that is actually the colored box.
      var colorBox = ui.Label({
        style: {
          backgroundColor: '#' + color,
          // Use padding to give the box height and width.
          padding: '8px',
          margin: '0 0 4px 0'
        }
      });
 
      // Create the label filled with the description text.
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
 
      // return the panel
      return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal')
      });
};
 
//  Palette with the colors
var palette =['FF0000','22ff00','7f7d7d'];
 
// name of the legend
var names = ['High', 'Modurate', 'Low'];
 
// Add color and and names
for (var i = 0; i < 3; i++) {
  legend.add(makeRow(palette[i], names[i]));
  }  
 
// add legend to map (alternatively you can also print the legend to the console)
Map.add(legend);
